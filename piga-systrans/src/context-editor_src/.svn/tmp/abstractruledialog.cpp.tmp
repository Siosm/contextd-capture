#include <QMessageBox>
#include <QPushButton>
#include <QTreeWidgetItem>
#include <QTableWidget>
#include <QVector>

#include "configuration.h"
#include "mrule.h"
#include "abstractruledialog.h"
#include "trule.h"
#include "ui_abstractruledialog.h"

AbstractRuleDialog::AbstractRuleDialog(QWidget *parent) :
	QDialog(parent),
	ui(new Ui::AbstractRuleDialog),
	hasAbstractRule(false),
	_result(QDialog::Accepted),
	domainWidget(),
	ruleWidget()
{
	initDialog();
	this->setWindowTitle("New Abstract Rule");
}

AbstractRuleDialog::AbstractRuleDialog(AbstractRule &subject, QWidget *parent) :
	QDialog(parent),
	ui(new Ui::AbstractRuleDialog),
	hasAbstractRule(true),
	rule(&subject),
	_result(QDialog::Accepted),
	domainWidget(),
	ruleWidget()
{
	initDialog();
	this->setWindowTitle("Edit Abstract Rule");

	//Add a Delete button to the dialog
	QPushButton *button = new QPushButton("&Delete", ui->buttonBox);
	ui->buttonBox->addButton(button, QDialogButtonBox::DestructiveRole);
	connect(button, SIGNAL(clicked()), this, SLOT(onDeleteClicked()));

	//Setup the dialog with the rule's data
	ui->displayNameEdit->setText(rule->displayName());
	ui->appComboBox->setCurrentIndex(ui->appComboBox->findData(rule->appName(), Qt::UserRole));
	ui->notifyCheckBox->setChecked(rule->notifyUser());
	ui->promptCheckBox->setChecked(rule->promptUser());

	//Setup the transition rules (ie. domains)
	QVector<TRule> trules = rule->tRules();
	while (!trules.empty()) {
		const TRule trule = trules.first();
		trules.pop_front();
		bool found=false;

		//Lookup the domains combo to see if the domain exists
		for (int i=0, count=ui->domainsList->topLevelItemCount(); i<count && !found; ++i) {
			QTreeWidgetItem *item = ui->domainsList->topLevelItem(i);

			//Check the domain's checkbox if it is found in the list
			if (item->data(0, Qt::UserRole).toString() == trule.fromDomain()) {
				item->setCheckState(0,Qt::Checked);
				if (trule.hasNotify())
					item->setCheckState(1, trule.notify() ? Qt::Checked : Qt::Unchecked);
				if (trule.hasPrompt())
					item->setCheckState(2, trule.prompt() ? Qt::Checked : Qt::Unchecked);
				found=true;
			}
		}

		//If the domain isn't found in the source domains list, it's a regular expression
		if (!found) {
			domainWidget.addExpression(trule.fromDomain(),
									   trule.hasNotify()? (trule.notify()? Qt::Checked : Qt::Unchecked) : Qt::PartiallyChecked,
									   trule.hasPrompt()? (trule.prompt()? Qt::Checked : Qt::Unchecked) : Qt::PartiallyChecked);
		}
	}

	//Setup the matching rules
	QVector<MRule> mrules = rule->mRules();
	while (!mrules.empty()) {
		const MRule mrule = mrules.first();
		mrules.pop_front();
		ruleWidget.addRule(mrule.conditions());
	}

	onCurrentProgramChanged(ui->appComboBox->currentIndex());
}

AbstractRuleDialog::~AbstractRuleDialog()
{
	delete ui;
}

void AbstractRuleDialog::initDialog()
{
	ui->setupUi(this);

	//Signal for the Ok button
	connect(ui->buttonBox->button(QDialogButtonBox::Ok), SIGNAL(clicked()), this, SLOT(onOkClicked()));

	//Mandatory fields should trigger the onMandatoryFieldsChanged function
	connect(&domainWidget, SIGNAL(regexpChanged()), this, SLOT(onMandatoryFieldsChanged()));
	connect(&ruleWidget, SIGNAL(ruleCountChanged(int)), this, SLOT(onMandatoryFieldsChanged()));
	connect(ui->displayNameEdit, SIGNAL(textChanged(QString)), this, SLOT(onMandatoryFieldsChanged()));
	connect(ui->domainsList, SIGNAL(itemChanged(QTreeWidgetItem*,int)), this, SLOT(onMandatoryFieldsChanged()));
	onMandatoryFieldsChanged();

	//Signals related to the domains tree widget
	connect(ui->domainsList, SIGNAL(itemSelectionChanged()), this, SLOT(onDomainsListSelectionChanged()));
	connect(ui->domainsClearCheckboxButton, SIGNAL(clicked()), this, SLOT(onDomainsClearCheckboxClicked()));
	onDomainsListSelectionChanged();

	//Selections, sorting and resizing of trees/lists
	ui->domainsList->header()->setResizeMode(0, QHeaderView::ResizeToContents);
	ui->domainsList->header()->setResizeMode(1, QHeaderView::ResizeToContents);
	ui->domainsList->header()->setResizeMode(2, QHeaderView::ResizeToContents);

	ui->domainsList->setSelectionMode(QAbstractItemView::ExtendedSelection);
	ui->domainsList->sortByColumn(0, Qt::AscendingOrder);

	//Fill the domains combobox and domains listview
	const Configuration &inst = Configuration::instance();
	QList<Domain> domlist = inst.domainList();
	int listlen=domlist.size(), i=0;
	while (i<listlen) {
		//Domains tree widget
		QTreeWidgetItem *item = new QTreeWidgetItem(ui->domainsList, QStringList(domlist.at(i).displayName()));
		item->setIcon(0, QIcon(domlist.at(i).iconPath()));
		item->setCheckState(0, Qt::Unchecked);
		item->setCheckState(1, Qt::PartiallyChecked);
		item->setCheckState(2, Qt::PartiallyChecked);
		item->setData(0, Qt::UserRole, domlist.at(i).name());

		//Target domains combobox
		++i;
	}

	//Fill the applications combobox
	ui->appComboBox->setInsertPolicy(QComboBox::InsertAlphabetically);

	QList<Program> proglist = inst.programList();
	listlen=proglist.size(); i=0;
	while (i<listlen) {
		ui->appComboBox->addItem(QIcon(proglist.at(i).icon()), proglist.at(i).displayName(), proglist.at(i).name());
		qDebug("%s", qPrintable(proglist.at(i).icon()));
		++i;
	}

	//Make sure to refresh the rules widget when the program changes
	connect(ui->appComboBox, SIGNAL(currentIndexChanged(int)), this, SLOT(onCurrentProgramChanged(int)));

	//Add custom widgets to the dialog
	ui->regexpGroupBox->layout()->addWidget(&domainWidget);
	ui->rulesGroupBox->layout()->addWidget(&ruleWidget);
}

void AbstractRuleDialog::changeEvent(QEvent *e)
{
    QDialog::changeEvent(e);
    switch (e->type()) {
    case QEvent::LanguageChange:
        ui->retranslateUi(this);
        break;
    default:
        break;
    }
}

/* Overriden dialog result functions */
void AbstractRuleDialog::setResult(int result)
{
	_result = result;
}

int AbstractRuleDialog::result() const
{
	if (_result > QDialog::Accepted)
		return _result;
	else return
			QDialog::result();
}

/* Dialog functions */
void AbstractRuleDialog::onDomainsListSelectionChanged()
{
	ui->domainsClearCheckboxButton->setEnabled(ui->domainsList->selectedItems().size() > 0);
}

void AbstractRuleDialog::onDomainsClearCheckboxClicked()
{
	QList<QTreeWidgetItem*> list = ui->domainsList->selectedItems();
	for (int i=0, count=list.size(); i<count; ++i) {
		QTreeWidgetItem *item = list.at(i);
		item->setCheckState(1, Qt::PartiallyChecked);
		item->setCheckState(2, Qt::PartiallyChecked);
	}
}

void AbstractRuleDialog::onDeleteClicked()
{
	QMessageBox box(QMessageBox::Warning, "Delete Abstract Rule",
					"Are you sure you want to delete this abstract rule? This action cannot be undone.",
					QMessageBox::Yes | QMessageBox::No, this);
	box.show();
	box.exec();
	if (box.result() == QMessageBox::Yes) {
		this->setResult(Deleted);
		this->reject();
	}
}

void AbstractRuleDialog::onOkClicked()
{
	if (hasAbstractRule)
		this->setResult(Edited);
	else
		this->setResult(Created);
	this->accept();
}

void AbstractRuleDialog::onMandatoryFieldsChanged()
{
	//Valid if there is a display name and if there are mrules
	bool valid = (ui->displayNameEdit->text() != "") &&
				 (ruleWidget.ruleCount() > 0);

	//Valid if no regular expression is invalid
	if (valid) {
		valid = domainWidget.allExpressionsValid();
	}

	//Valid if there is at least one source domain, or one expression
	if (valid) {
		int i;
		for (i=0, valid=false; i<ui->domainsList->topLevelItemCount() && !valid; ++i)
			valid = (ui->domainsList->topLevelItem(i)->checkState(0) == Qt::Checked);

		valid |= domainWidget.expressionCount() > 0;
	}

	//If the Abstract Rule is complete, the Ok button is enabled
	ui->buttonBox->button(QDialogButtonBox::Ok)->setEnabled(valid);
}

void AbstractRuleDialog::onCurrentProgramChanged(int index)
{
	if (index!=-1) {
		QString appName=ui->appComboBox->itemData(index).toString();
		Program app=Configuration::instance().getProgramByName(appName);
		ruleWidget.onProgramChanged(app);
	}
}
