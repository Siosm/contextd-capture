#ifndef CONFIGURATION_H
#define CONFIGURATION_H

#include <QReadWriteLock>
#include "xmlsp.h"
#include "rule.h"
#include "loop.h"
#include "domain.h"
#include "program.h"
#include <QMap>
#include <QVector>
#include <QList>
#include <QString>
#include <QMutex>

///The class that holds all the information stored into transitions.xml
class Configuration : private XMLSP::Parser
{
private:
	//We associate the program name to its related rules (the vector)
	//that finally leads to a map associating a parameter name to its regexp
	static QMap<QString, QVector<Rule> > rules;

	//We associate the program name to its related loops (the vector)
	//that finally leads to a map associating a parameter name to its regexp
	static QMap<QString, QVector<Loop> > loops;

	//Domains
	static QMap<QString, Domain > domains;
	Domain default_domain;

	//Programs
	static QMap<QString, Program > programs;
	static QList<QString> noKillPrograms;

	//Lock the configuration in read/write
	static QReadWriteLock readwritelock;

	//XML Parsing
	bool on_tag_open(const std::string& tag_name, XMLSP::StringMap& attributes);
	bool on_cdata(const std::string& cdata);
	bool on_tag_close(const std::string& tag_name);
	void on_error(int errnr, int line, int col, const std::string& message);

	// Program parsing
	void programParsing();

	//Read the configuration from file
	bool readConf();

	//We forbid the creation of multiple configuration objects
	Configuration();

public:
	//Get the only instance of the class
	static Configuration& instance();

	//Domains
	static Domain getDomainByName(QString name);
	const Transition getFirstMatchingTransition(Program app, Domain current_domain, QMap<QString, QString> values);
	Domain defaultDomain();
	QList<Domain> domainList();
	
	//Programs
	static bool isProgramAllowed(QString name, QString full_path);
	static Program getProgramByName(QString name);
	QList<Program> programList();
	QList<QString> noKillProgramList();

	//Reload
	static bool updateRules();

	//Rules and Loops
	QVector<Loop> loopsForProgram(QString name);
	QVector<Rule> rulesForProgram(QString name);
};

#endif // CONFIGURATION_H
